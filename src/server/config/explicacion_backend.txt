📌 Puntos clave de tu backend:
Autenticación con JWT:

Se genera un token JWT después de hacer login y se almacena en una cookie httpOnly.
La cookie se envía con httpOnly: true, lo que significa que el frontend no puede acceder directamente a ella con localStorage.
Middleware de autenticación (authMiddleware)

Verifica el token en las cookies (req.cookies.token).
Si el token es válido, añade los datos del usuario (req.user) y deja pasar la petición.
Si no hay token o es inválido, devuelve un 401 No autorizado.
Logout (logout)

Simplemente elimina la cookie del usuario con res.clearCookie("token", { path: "/" }).
Base de datos SQL Server (executeQuery)

Se usa MSSQL para almacenar usuarios.
Contraseñas encriptadas con bcrypt.


🔍 Diferencia entre authController.js y userController.js
Ambos controladores gestionan información de los usuarios, pero desde enfoques distintos:

1️⃣ authController.js (Autenticación y Sesión)
Este controlador maneja todo lo relacionado con la autenticación: login, logout y recuperación del perfil del usuario autenticado.
El endpoint /api/auth/me usa getUserProfile() para obtener los datos del usuario autenticado en base a su token.

📌 Ejemplo de uso de authController.js
Login: POST /api/auth/login
Logout: POST /api/auth/logout
Obtener perfil del usuario logueado: GET /api/auth/me
Registro: POST /api/auth/register
js
Copiar
Editar
const getUserProfile = async (req, res) => {
    const query = `
        SELECT user_id, user_handle, email_address, first_name, last_name, 
               avatar_url, cover_url, last_login, user_role
        FROM users WHERE user_id = @user_id`;

    const result = await executeQuery(query, [
        { name: "user_id", type: db.Int, value: req.user.id },
    ]);

    res.json({
        user_id: user.user_id,
        user_handle: user.user_handle,
        email: user.email_address,
        name: `${user.first_name} ${user.last_name}`,
        avatarUrl: user.avatar_url || null,
        coverUrl: user.cover_url || null, // 🔥 Ahora incluye cover_url
        lastLogin: user.last_login,
        isOnline: true,
        role: user.user_role,
    });
};
2️⃣ userController.js (Información general de usuarios)
Este controlador es más genérico y se usa para obtener información de otros usuarios, no solo del usuario autenticado.
El endpoint /api/user/:id usa getUserData() para obtener información de cualquier usuario dado su user_id.

📌 Ejemplo de uso de userController.js
Obtener datos de cualquier usuario: GET /api/user/:id
Obtener detalles adicionales del usuario: GET /api/user/:id/details
Buscar usuarios: (si agregas un endpoint para esto)
js
Copiar
Editar
const getUserData = async (req, res) => {
    const userId = req.params.id; // 🔥 Se obtiene el ID del usuario desde la URL

    const query = `
        SELECT 
            u.first_name, 
            u.last_name, 
            u.user_handle, 
            u.avatar_url, 
            u.cover_url, 
            u.location, 
            u.date_of_birth, 
            u.email_address, 
            u.bio, 
            (SELECT COUNT(*) FROM followers WHERE following_id = @userId) AS followers,
            (SELECT COUNT(*) FROM followers WHERE follower_id = @userId) AS following
        FROM users u
        WHERE u.user_id = @userId
    `;

    const inputs = [{ name: "userId", type: db.Int, value: userId }];
    const result = await executeQuery(query, inputs);

    res.send(result.recordset[0]);
};
📌 ¿Cuándo usar cada uno?
Caso	Usar authController.js	Usar userController.js
Obtener datos del usuario autenticado (sesión)	✅ GET /api/auth/me	❌ No aplica
Obtener datos de otro usuario por user_id	❌ No aplica	✅ GET /api/user/:id
Iniciar sesión	✅ POST /api/auth/login	❌ No aplica
Cerrar sesión	✅ POST /api/auth/logout	❌ No aplica
Obtener seguidores, seguidos, etc.	❌ No aplica	✅ GET /api/user/:id
🔧 Conclusión
authController.js se usa para autenticación y datos del usuario logueado.
userController.js se usa para obtener datos de cualquier usuario.
En tu caso, el problema era que authController.js no devolvía cover_url. Solucionado agregando cover_url en getUserProfile(). 🚀