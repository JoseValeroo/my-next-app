📌 Puntos clave de tu backend:
🔑 Autenticación con JWT:
Se genera un token JWT después de hacer login y se almacena en una cookie httpOnly.
La cookie se envía con httpOnly: true, lo que impide el acceso directo desde el frontend con localStorage.
🔐 Middleware de autenticación (authMiddleware):
Verifica el token en las cookies (req.cookies.token).
Si el token es válido, añade los datos del usuario a req.user y deja pasar la petición.
Si no hay token o es inválido, devuelve un 401 Unauthorized.
🚪 Logout (logout):
Elimina la cookie del usuario con res.clearCookie("token", { path: "/" }).
🛢️ Base de datos SQL Server:
Se usa MSSQL para almacenar usuarios y relaciones.
Contraseñas encriptadas con bcrypt para mayor seguridad.
🔍 Diferencias entre authController.js y userController.js
Ambos controladores manejan información de los usuarios, pero con diferentes propósitos:

🛠️ authController.js (Autenticación y sesión)
Maneja autenticación: login, logout y perfil del usuario autenticado.
No devuelve datos de otros usuarios, solo del usuario en sesión.
GET /api/auth/me usa getUserProfile() para obtener los datos del usuario autenticado mediante su token.
📌 Endpoints de authController.js
Acción	Endpoint	Método
Login	/api/auth/login	POST
Logout	/api/auth/logout	POST
Obtener perfil del usuario autenticado	/api/auth/me	GET
Registro de usuario	/api/auth/register	POST
js
Copiar
Editar
const getUserProfile = async (req, res) => {
    const query = `
        SELECT user_id, user_handle, email_address, first_name, last_name, 
               avatar_url, cover_url, last_login, user_role
        FROM users WHERE user_id = @user_id`;

    const result = await executeQuery(query, [
        { name: "user_id", type: db.Int, value: req.user.id },
    ]);

    res.json({
        user_id: user.user_id,
        user_handle: user.user_handle,
        email: user.email_address,
        name: `${user.first_name} ${user.last_name}`,
        avatarUrl: user.avatar_url || null,
        coverUrl: user.cover_url || null, // 🔥 Ahora incluye cover_url
        lastLogin: user.last_login,
        isOnline: true,
        role: user.user_role,
    });
};
🔍 userController.js (Información general de usuarios)
Obtiene información de otros usuarios, no solo del autenticado.
Incluye datos como seguidores, seguidos, detalles adicionales, etc.
GET /api/user/:id usa getUserData() para obtener la info de cualquier usuario dado su user_id.
📌 Endpoints de userController.js
Acción	Endpoint	Método
Obtener datos de cualquier usuario	/api/user/:id	GET
Obtener detalles adicionales del usuario	/api/user/:id/details	GET
js
Copiar
Editar
const getUserData = async (req, res) => {
    const userId = req.params.id; // 🔥 Se obtiene el ID del usuario desde la URL

    const query = `
        SELECT 
            u.first_name, 
            u.last_name, 
            u.user_handle, 
            u.avatar_url, 
            u.cover_url, 
            u.location, 
            u.date_of_birth, 
            u.email_address, 
            u.bio, 
            (SELECT COUNT(*) FROM followers WHERE following_id = @userId) AS followers,
            (SELECT COUNT(*) FROM followers WHERE follower_id = @userId) AS following
        FROM users u
        WHERE u.user_id = @userId
    `;

    const inputs = [{ name: "userId", type: db.Int, value: userId }];
    const result = await executeQuery(query, inputs);

    res.send(result.recordset[0]);
};
📌 ¿Cuándo usar cada uno?
Caso	authController.js	userController.js
Obtener datos del usuario autenticado	✅ GET /api/auth/me	❌ No aplica
Obtener datos de otro usuario por user_id	❌ No aplica	✅ GET /api/user/:id
Iniciar sesión	✅ POST /api/auth/login	❌ No aplica
Cerrar sesión	✅ POST /api/auth/logout	❌ No aplica
Obtener seguidores, seguidos, etc.	❌ No aplica	✅ GET /api/user/:id
🔧 Conclusión
authController.js → Para autenticación y datos del usuario logueado.
userController.js → Para obtener datos de cualquier usuario.
El error de la portada (cover_url) se solucionó al agregarlo a getUserProfile() en authController.js. 🚀