‚ú¨ Explicaci√≥n Completa del Sistema de Inicio de Sesi√≥n en Next.js con Cookies y Contexto

Tu sistema de inicio de sesi√≥n funciona de la siguiente manera:

1. El usuario inicia sesi√≥n en `LoginPage.tsx`, enviando credenciales al backend.
2. El backend valida las credenciales, genera un JWT (Token de Sesi√≥n) y lo guarda en cookies HTTP-only.
3. El frontend guarda los datos del usuario en el contexto global de `AuthContext.tsx`.
4. Los componentes protegidos dependen de `useAuth()` y solo se muestran si el usuario est√° autenticado.
5. Al cerrar sesi√≥n, el backend elimina la cookie y el frontend actualiza el contexto.

---

üóÇ Archivos involucrados

| Archivo               | Funci√≥n |
|----------------------|------------------------------------------------|
| `LoginPage.tsx`       | Env√≠a credenciales al backend, guarda el usuario en el contexto y redirige. |
| `AuthContext.tsx`     | Maneja el estado global del usuario (`user`) y gestiona `logout()`. |
| `authRoutes.js` (backend)  | Define las rutas `/login`, `/logout` y `/profile`. |
| `authController.js` (backend) | Valida credenciales, genera el token y maneja cookies. |
| `authMiddleware.js` (backend) | Protege rutas verificando la validez del token. |
| `server.js` (backend) | Configura el servidor Express y usa las rutas de autenticaci√≥n. |

---

### üîß Gest√≠on de Sesiones en la Aplicaci√≥n

1. **Inicio de Sesi√≥n**
   - El usuario introduce sus credenciales en `LoginPage.tsx`.
   - El frontend realiza una petici√≥n `POST` a `/api/auth/login` enviando `user_handle` y `password`.
   - El backend verifica las credenciales en `authController.js`.
   - Si son correctas, genera un JWT y lo almacena en una cookie HTTP-only.
   - Se devuelve la informaci√≥n del usuario y el frontend la guarda en `AuthContext.tsx`.

2. **Autenticaci√≥n Autom√°tica**
   - Cuando la aplicaci√≥n carga, `AuthContext.tsx` hace un `fetch` a `/api/auth/me`.
   - El backend valida la cookie con `authMiddleware.js` y devuelve los datos del usuario.
   - Si es v√°lido, el usuario se mantiene autenticado.

3. **Protecci√≥n de Rutas**
   - P√°ginas protegidas verifican el estado de `useAuth()`.
   - Si el usuario no est√° autenticado, es redirigido a la p√°gina de inicio de sesi√≥n.

4. **Cierre de Sesi√≥n**
   - Cuando el usuario cierra sesi√≥n (`logout()` en `AuthContext.tsx`):
     - Se env√≠a una petici√≥n `POST` a `/api/auth/logout`.
     - El backend borra la cookie HTTP-only.
     - El frontend elimina el usuario del contexto y redirige a la pantalla de inicio.

5. **Manejo de `rememberMe`**
   - Si el usuario marca "Recordarme", el token tiene una duraci√≥n mayor.
   - Se almacena en la cookie con una fecha de expiraci√≥n extendida.

6. **Perfil del Usuario**
   - `AuthContext.tsx` almacena la informaci√≥n del usuario obtenida de `/api/auth/me`.
   - Ahora tambi√©n incluye `cover_url`, permitiendo mostrar la imagen de portada en el perfil.

---
### Explicaci√≥n del Sistema de Sesiones en la Aplicaci√≥n

Este documento describe c√≥mo funciona la gesti√≥n de sesiones en la aplicaci√≥n, incluyendo el flujo de autenticaci√≥n, validaci√≥n del usuario y cierre de sesi√≥n.

---

## **Inicio de Sesi√≥n**
1. El usuario introduce sus credenciales (nombre de usuario y contrase√±a) en la pantalla de login.
2. Se env√≠a una petici√≥n `POST` a `/api/auth/login` con los datos de autenticaci√≥n.
3. El backend verifica las credenciales:
   - Si son correctas:
     - Genera un **JWT (JSON Web Token)**.
     - Guarda el JWT en una **cookie HTTP-only** para evitar accesos desde el frontend.
     - Actualiza la fecha de `last_login` en la base de datos.
     - Devuelve una respuesta de √©xito.
   - Si son incorrectas:
     - Devuelve un error `401 Unauthorized`.

### **Gestor de Sesiones en el Frontend**
- `AuthContext.tsx` maneja el estado global de autenticaci√≥n.
- Al iniciar sesi√≥n con √©xito:
  - Se hace una petici√≥n a `/api/auth/me` para obtener los datos del usuario logueado.
  - Se almacenan en el estado global (`setUser`).

---

## **Protecci√≥n de Rutas con Middleware**
- Para acceder a rutas protegidas:
  1. El frontend hace una petici√≥n a `/api/auth/me`.
  2. El backend verifica la cookie con el JWT.
  3. Si es v√°lido, se obtiene el usuario y se devuelve al frontend.
  4. Si no es v√°lido o no hay token, se devuelve `401 Unauthorized` y el usuario es redirigido al login.

---

## **Informaci√≥n Devuelta en `/api/auth/me`**
- El endpoint `/api/auth/me` devuelve los datos del usuario logueado:
  ```json
  {
    "user_id": 1013,
    "user_handle": "josedev",
    "email": "josedev@gmail.com",
    "name": "jose dev",
    "avatarUrl": "https://example.com/avatar.jpg",
    "coverUrl": "https://example.com/cover.jpg",  // üî• Ahora tambi√©n incluye cover_url
    "lastLogin": "2025-03-04T11:14:43.547Z",
    "isOnline": true,
    "role": "admin"
  }
  ```

---

## **Opci√≥n `rememberMe` (No Implementado en Backend)**
- En `LoginPage.tsx`, se env√≠a el campo `rememberMe`, pero **el backend no lo maneja** actualmente.
- Si se quiere implementar:
  - Cuando `rememberMe` est√© activado, el JWT debe generarse con `expiresIn: "7d"` en lugar de `1h`.
  - Se podr√≠a almacenar en `localStorage` o mantener la cookie con un tiempo de expiraci√≥n mayor.

---

## **Cierre de Sesi√≥n (`/api/auth/logout`)**
1. El usuario hace clic en "Cerrar Sesi√≥n".
2. Se env√≠a una petici√≥n `POST` a `/api/auth/logout`.
3. El backend:
   - Borra la cookie con el JWT.
   - Devuelve una respuesta de √©xito.
4. En el frontend:
   - Se ejecuta `setUser(null)` para limpiar el estado global.
   - Se elimina `localStorage.removeItem("token")` en caso de que se haya guardado.
   - Se redirige al usuario a la p√°gina de inicio.

---

### **Resumen de Cambios y Mejoras Aplicadas**
‚úÖ **Se ha a√±adido `coverUrl` a la respuesta de `/api/auth/me`.**
‚úÖ **Se ha aclarado que `rememberMe` no est√° implementado en el backend.**
‚úÖ **Se ha especificado la eliminaci√≥n del token en `localStorage` al cerrar sesi√≥n.**


